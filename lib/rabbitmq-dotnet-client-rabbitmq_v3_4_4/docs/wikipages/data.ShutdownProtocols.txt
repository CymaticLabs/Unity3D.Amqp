** General pattern of AMQP client shutdown

AMQP connection, model, channel and session objects share the same
general approach to managing network failure, internal failure, and
explicit local shutdown.

Each object has a lifecycle state, which can be one of

 - [b open]: the object is ready for use

 - [b closing]: the object has been explicitly shut down locally, has
   issued a shutdown request to any supporting lower-layer objects,
   and is waiting for the lower layer's shutdown-complete notification

 - [b closed]: the object has received a shutdown-complete
   notification from a lower layer, and has shut itself down in
   response.

Objects always end up in the closed state, without regard for whether
the closure was triggered by a local application request, by an
internal client library failure, or by a remote network request or
network failure.

In general, objects possess the following shutdown-related members:

 - a [b shutdown event handler] [code MulticastDelegate], which will
   be fired when the object transitions to closed state

 - a [b close reason] property, to allow callers to inspect
   information about the circumstances that led to the object's
   shutdown

 - a convenience property, useful for debugging, for testing whether
   the object is in an open state

 - a [b close] method that triggers the shutdown machinery for the
   object

** Information about the circumstances of a shutdown

One class, [code ShutdownEventArgs], and one enumeration, [code
ShutdownInitiator], are provided for applications to query objects
about the circumstances of their shutdown.

*** ShutdownInitiator

[code ShutdownInitiator] contains values representing the originator
of a shutdown event. The three values are

 - [b Application], for shutdown events that originated due to local
   application action (i.e. an explicit call to a [code Close()]
   method)

 - [b Library], for shutdowns caused by events originating within the
   RabbitMQ .NET client library itself, such as internal errors

 - [b Peer], for shutdowns triggered by the peer, either through
   network failure or through explicit peer request (i.e. a received
   [code channel.close] or [code connection.close] method).

*** ShutdownEventArgs

The [code ShutdownEventArgs] class is used to carry the full
circumstances of a shutdown, including a [code ShutdownInitiator]
value and any relevant reply code and/or text, AMQP class and/or
method ID, and possible "cause" object (usually an [code Exception]).

A [code ShutdownEventArgs] instance is carried as the argument to
various shutdown event handler delegates used in the system, and one
is also carried by [code AlreadyClosedException] and [code
OperationInterruptedException].

** The CloseReason properties, and idempotency of Close() calls

Closable AMQP objects generally have a [code CloseReason] property, of
type [code ShutdownEventArgs], which can be used to determine the
situation in which the object was shut down. A null value for the
property indicates that no close reason is available, because the
object is not yet shut down. Once the close reason is set for an
object, it will not change.

A [code Close()] method on an object, with the exception of [code IConnection],
can be called several times without penalty. Since a close reason
can only be set once per object, calls after the first are effectively
ignored.

Calls to [code Close()] will not return to the caller until the full
shutdown procedure is completed for the object concerned.

** Atomicity, and use of the IsOpen flags

Use of the various [code IsOpen] properties is not recommended for
production code, since the property may change value between the time
that you look at it and the time you use the object. For example, the
following code contains a race condition:

@code java
  public void BrokenMethod(IModel model) {
    // RACE CONDITION
    if (model.IsOpen) {
      // The following method call depends on the model being in open state.
      // The state may change between the IsOpen call and the BasicQos call!
      model.BasicQos(0, 1, false);
    }
  }

The pattern that should be used is to ignore the [b IsOpen] property,
and instead simply attempt the action desired. An [code
OperationInterruptedException] will be thrown in cases where the object is in
an invalid state:

@code java
  public void BetterMethod(IModel model) {
    try {
      ...
      model.BasicQos(0, 1, false);
    } catch (OperationInterruptedException ope) {
      // Handle one of the many possible reasons why the BasicQos or any
      // other operation before it couldn't be handled
    } catch (IOException ioe) {
      // Check why socket was closed
    }
  }
  
In the above pattern we also catch [code IOException]s caused by a
[code SocketException]. Such exceptions may be raised when the broker
closes the connection unexpectedly.

** Specific shutdown protocols

*** IModel

In the current version of the RabbitMQ .NET client library, supporting
AMQP specification versions 0-8 and 0-9, IModel encapsulates both a
session and a channel layered on top of a connection. Shutting down an
IModel instance causes the underlying session and channel to be
closed, but does not close the underlying IConnection.

@code java
 delegate ModelShutdownEventHandler(IModel model, ShutdownEventArgs reason);
 event ModelShutdownEventHandler ModelShutdown;
 ShutdownEventArgs CloseReason { get; }
 bool IsOpen { get; }
 void Close(ushort replyCode, string replyText);

Any time an AMQP operation is invoked on an [code IModel] that is not
in the opened state, an [code AlreadyClosedException] is thrown.

*** IConnection

IConnection encapsulates an AMQP connection. When the connection shuts
down, either through explicit user action or through network failure
or similar, all associated channels, sessions, and models are shut
down.
Connection can be gracefully closed using [code Close()] or forced
to close using [code Abort()] methods.
[code Close(int timeout)] and [code Abort(int timoeut)] methods allow for
specifiyng timeout for underlying connection close operations to finish.
If such timeout is reached we force the socket to close and exit. Default
value is [code Timeout.Infinite].
A call on [code Close()] method on [code IConnection] object which was
previously closed, will throw [code AlreadyClosedException] and new close
reason will be ignored. [code Abort()] can be called several times, since
any attempt to abort closed connection will be ignored.
[code ShutdownReport] property returns any errors that occured during
connection close operations as a list of [code ShutdownReportEntry] objects.

@code java
 delegate ConnectionShutdownEventHandler(IConnection connection,
                                         ShutdownEventArgs reason);
 event ConnectionShutdownEventHandler ConnectionShutdown;
 ShutdownEventArgs CloseReason { get; }
 bool IsOpen { get; }
 void Close();
 void Close(int timeout);
 void Abort();
 void Abort(int timeout);
 IList ShutdownReport { get; }
 
*** ISession

Sessions are currently an internal, implementation-only concept, and
[b should not be used by applications], as they are not part of the
public API.

@code java
 delegate SessionShutdownEventHandler(ISession session,
                                      ShutdownEventArgs reason);
 event SessionShutdownEventHandler SessionShutdown;
 ShutdownEventArgs CloseReason { get; }
 bool IsOpen { get; }
 void Close(ShutdownEventArgs reason);
