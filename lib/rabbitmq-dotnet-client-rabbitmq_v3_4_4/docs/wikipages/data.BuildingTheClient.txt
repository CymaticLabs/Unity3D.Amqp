** Source Tree Layout

The source tree is laid out as follows:

  - [code docs] - Contains the AMQP specification XML files, used to generate code in [code projects/client/Apigen] project
  - [code lib] - Third-party libraries and programs referenced by the code or used during the build
  - [code projects] - Source code to the various parts of the system
      - [code client] - Source code  and project files for building the client
          - [code Apigen] - Project for the XML specification parser and code generator application
          - [code ApigenBootstrap] - Project for creating a library out of some parts of RabbitMQ.Client's source code that are used in Apigen
          - [code RabbitMQ.Client] - The client library project
          - [code Unit] - Unit tests for the client library
      - [code wcf] - WCF binding source code and project files
          - [code RabbitMQ.ServiceModel] - The WCF binding project
      - [code examples] - Example projects
          - [code client] - Example code and projects for using the client library
          - [code wcf] - Example code and projects for using the WCF binding
  - [code Local.props] - Local customizations for the build process. Copy the contents of [code Local.props.example] in this file, to start with
  - [code RabbitMQDotNetClient.sln] - The Visual Studio solution file which contains all the projects

** Build Prerequisites

To compile the RabbitMQ .NET client library, you will need

  - a .NET development environment:
      - Microsoft .NET 3.5 (or later) if you want to build the WCF binding too
  - Microsoft Visual Studio 2008 or later (optional)

To run the unit tests, you will need

 - NUnit 2.5 or later; included in the [code lib] directory

** Configuring Your Tree

Copy [code Local.props.example] to [code Local.props], and edit it if necessary (the properties in this file have suggestive names). Set [code PropTargetFramework] to [code v3.5], [code v4.0] or [code v4.5]. If you would like to build under Mono, set [code PropUsingMono] to [code true] in this case.

** Building

*** On Windows, with Visual Studio

Simply open [code RabbitMQDotNetClient.sln] with Visual Studio and build.

If you are using a version of Visual Studio later than Visual Studio 2005, you will have to convert the solution to make it compatible with your version of Visual Studio. This process is automated and you are presented with a wizard when you first open the solution file.

The projects in the RabbitMQ .NET client contain some customizations in order to allow generating source files and running NUnit tests as part of the build process. You might be presented with warnings claiming that the projects might be unsafe. You will have to instruct Visual Studio to open all projects normally.

To skip running the NUnit tests as part of the build, select the [code DebugNoTest] build configuration.

Note: If you change a property in [code Local.props] while the solution is loaded in Visual Studio, you will have to close the solution and reopen it, for the changes to take effect.

*** On Windows, without Visual Studio

To build the client library without Visual Studio, first you need to make sure you have the .NET's framework directory in your [code PATH] environment variable. The .NET framework directory can usually be found at [code %WINDIR%\Microsoft.NET\Framework\v3.5] for .NET 3.5.

Open the Command Prompt (Start -> Run -> cmd) or Cygwin (if you have it installed) and change to the client's directory. Now type [code msbuild.exe] and hit return to start building the solution.

Refer to MSBuild's documentation for information on valid command line switches for [code msbuild.exe].

*** On Linux, using Mono

For building under Mono, please refer to [link http://www.rabbitmq.com/build-dotnet-client.html#building-on-linux].

** Building the WCF binding

Building the WCF binding is enabled by default in [code Local.props] on Windows.

To disable building the WCF binding, set [code PropBuildWcf] to [code false].

Building the WCF binding under Mono is currently unsupported due to limitations of Mono.

** Build Products

The build products available after a successful build are:

 - [code projects/client/RabbitMQ.Client/build/bin/RabbitMQ.Client.dll] - The final client assembly
 - Example client programs, like [code projects/examples/client/SendString/build/bin/SendString.exe] and [code projects/examples/client/LogTail/build/bin/LogTail.exe]

If building the WCF binding is enabled, there will also be:

 - [code projects/wcf/RabbitMQ.ServiceModel/build/bin/RabbitMQ.ServiceModel.dll] - The WCF binding library
 - Example programs for the WCF binding, like [code projects/examples/wcf/Test/build/bin/RabbitMQ.ServiceModel.Test.exe]

Other build products:

 - [code gensrc/RabbitMQ.Client/autogenerated-api-*.cs] - Protocol-specific autogenerated code, produced by Apigen
 - [code projects/client/RabbitMQ.Client/build/bin/RabbitMQ.Client.xml] - [code csc]-generated XML documentation of the client assembly
 - [code projects/wcf/RabbitMQ.ServiceModel/build/bin/RabbitMQ.ServiceModel.xml] - [code csc]-generated XML documentation of the WCF binding

