The internals of the RabbitMQ .NET AMQP client library implementation
live in [code src/client/impl], in C# namespace [code
RabbitMQ.Client.Impl]. Most of the classes mentioned below are in this
namespace, modulo conspicuous exceptions such as [code IModel] and
[code IProtocol], which are instead in namespace [code
RabbitMQ.Client].

** Connections, Channels, Sessions and Models

Each AMQP connection is represented by an instance of [code
ConnectionBase]. Each connection has one thread running in the
background, which reads and dispatches frames from the connection
socket, as well as acting as a serialization point for outbound AMQP
commands. There may also be two additional threads responsible for
[code Heartbeat] support (In and Outbound), if it was negotiated during 
the connection open process.

Each [code ConnectionBase] instance has an instance of [code
SessionManager], which is responsible for allocation of channel
numbers, and maintenance of the map from channel numbers to [code
ISession] instances.

Each AMQP channel, that is, an uninterpreted, independent stream of
commands, is represented by an instance of [code ISession]. There are
three implementations of this interface at the time of writing: [code
Session], which provides the normal operation of a channel, [code
QuiescingSession], which represents a channel in the process of an
abnormal shutdown, and [code MainSession] which controls special 
channel zero responsible for sending/receiving frames and used in
[code ConnectionBase]. The [code ISession] instances do not interpret
the commands that travel across them.

Interpretation of AMQP commands sent and received is done by the
"model" code, implemented for the most part in [code ModelBase]. This
is the class that contains the majority of the implementation of the
public AMQP API from [code IModel], as well as the private AMQP
operations from [code IFullModel]. It is also [code ModelBase] that
provides the request/response correlation during an AMQP RPC-style
synchronous operation, in conjunction with [code
RpcContinuationQueue].

** Channel zero

Channel zero is a special connection-management channel, and is
implemented using field [code ConnectionBase.m_model0]. See also field
[code ModelBase.m_connectionStartCell] and methods [code
ModelBase.HandleConnection][i Methodname], all of which are an awkward
part of [code ModelBase] only relevant to operations on channel zero.
[code MainSession] implements the special behaviour of the channel zero.

** Information dataflow from the server to the client

@dot dataflow_server_to_client
  digraph dataflow_server_to_client {
    size="4,4"

    handlers [label="Handle* methods"];

    Socket -> Frame [label="(1)bytes"];
    Frame -> ConnectionBase [label="(2)Frame"];
    ConnectionBase -> SessionManager [label="(3)channel#"];
    SessionManager -> ConnectionBase [label="(4)ISession"];
    ConnectionBase -> Session [label="(5)"];
    Session -> CommandAssembler [label="(6)Frame"];
    CommandAssembler -> Session [label="(7)Command"];
    Session -> ModelBase [label="(8)CommandReceived event"];
    ModelBase -> DispatchAsynchronous [label="(9)"];
    DispatchAsynchronous -> handlers [label="(10a)"];
    DispatchAsynchronous -> ModelBase [label="(10b)"];
    ModelBase -> IRpcContinuation [label="(11b)"];
  }

AMQP commands transmitted from the server to the client are processed
by each [code ConnectionBase]'s connection thread, which runs [code
ConnectionBase.MainLoop] until the connection is terminated.

[code MainLoop] reads a frame from the connection's socket, blocking
until either some traffic arrives or the socket's read-timeout exception
fires. A timeout in .Net means that the socket is in an unusable state,
hence the whole [code Connection] needs to be closed.
If [code Heartbeat] support is active then two additional loops run in
separate threads: [code ConnectionBase.HeartbeatReadLoop] and
[code ConnectionBase.HeartbeatWriteLoop].

[code HeartbeatReadLoop] continuously checks if our connection was
inactive for too long and we missed too many [code Heartbeat] frames
the broker. In such case [code EndOfStreamException] occurs and the
connection is closed.

[code HeartbeatWriteLoop] continously checks the activity of the
connection and forces [code Heartbeat] frame to be sent to the broker
if it was idle for too long.

Once a complete frame has been read from the socket, it is dispatched
with a call to [code ISession.HandleFrame] to the [code ISession]
object responsible for the channel number carried within the frame.

In the normal case, the [code ISession] implementation will be [code
Session], whose [code HandleFrame] method makes use of an instance of
[code CommandAssembler] to stitch sequentially-received frames
together into whole AMQP commands. As soon as a complete command is
available, it is sent through the [code CommandReceived] event handler
on [code Session], which in the usual case will result in an
invocation of [code ModelBase.HandleCommand].

[code ModelBase.HandleCommand] uses [code DispatchAsynchronous], which
is part of the automatically-generated code produced by Apigen, to
decide whether the received command is an asynchronous event
(including RPC responses that have been marked in [code IModel] as
[code AmqpForceOneWay] etc) or an RPC response that should release a
waiting [code IRpcContinuation], about which more below.

** Information dataflow from the client to the server

There are two styles of interaction available to [code ModelBase]:

 - synchronous, RPC-style interaction, e.g. [code ExchangeDeclare],
   [code BasicGet] and [code BasicConsume].

 - asynchronous, event-style interaction, e.g. [code BasicAck], [code
   BasicPublish].

Sometimes, what would normally be an RPC-style interaction must, for
implementation reasons, instead be treated as two loosely associated
asynchronous messages, for instance when [code nowait=true] on methods
like [code ExchangeDeclare], or in the case of methods like [code
BasicConsume]. For more information, see the section on [code
AmqpForceOneWay] in the section on ApiGen.

The [code ModelBase] implementation does not directly choose which
alternative to use: instead, the autogenerated code makes calls to
[code ModelBase.ModelRpc] and [code ModelBase.ModelSend] as directed
by the annotations on [code IFullModel] (again, see the section on
ApiGen for more details).

[code ModelSend] is the simpler of the two, as no record of an awaited
reply is required: the command is simply formatted and sent down the
socket (via [code Command.Transmit], via [code SessionBase.Transmit]).

[code ModelRpc] is more involved. Calls to [code IModel] methods that
(indirectly) invoke [code ModelRpc] should only occur in the
application's thread, and should never occur in the connection's
thread (see also the section on threading issues and deadlock in the
ApiOverview).

** Client-to-server AMQP RPC

When an application thread calls an [code IModel] method that in turn
calls [code ModelBase.ModelRpc], the application thread is suspended,
the request is sent to the server, and when the response arrives, the
suspended application thread is awakened. The interface between the
application thread and the connection thread is usually an instance of
[code SimpleBlockingRpcContinuation], the methods of which are called
from the connection thread when a reply or exceptional condition
arrives.

If [code SimpleBlockingRpcContinuation.HandleCommand] is called, the
reply [code Command] is handed back to [code ModelRpc], which then
hands it back through the autogenerated code to the
application. Otherwise, [code
SimpleBlockingRpcContinuation.HandleModelShutdown] will be called due
to some error condition on the channel, in which case [code
OperationInterruptedException] will be thrown from [code
SimpleBlockingRpcContinuation.GetReply], through [code ModelRpc], and
out to the application.

@sequence RpcSequence 6
  # Define the objects
  object(App,"Application");
  object(A,"ModelBase");
  placeholder_object(K);
  object(C,"Connection");
  object(M,"RPC cont." "queue");
  object(S,"Socket");
  step();

  sync();
  active(App);
  message(App,A,"IModel operation");
  active(A);
  message(A,A,"ModelRpc");
  active(A);
  create_message(A,K,"RPC cont.");
  message(A,C,"TransmitAndEnqueue(msg,continuation)");
  message(C,M,"Enqueue(continuation)");
  return_message(M,C,"");
  async();
  message(C,S,"Transmit(msg)");
  sync();
  return_message(C,A,"");
  message(A,K,"GetReply()");
  active(K);
  async();
  message(S,C,"Transmit(reply)");
  sync();
  message(C,M,"Next");
  return_message(M,C,"continuation");
  message(C,K,"HandleCommand(reply)");
  return_message(K,C,"");
  return_message(K,A,"reply");
  inactive(K);
  return_message(A,App,"final reply");
  inactive(A);
  inactive(A);
  inactive(App);

  step();
  complete(App);
  complete(A);
  complete(C);
  complete(M);
  complete(S);

** Constants from the specification

From numerous places in the implementation source code:

@code java
 // We use spec version 0-9 for common constants such as frame types,
 // error codes, and the frame end byte, since they don't vary *within
 // the versions we support*. Obviously we may need to revisit this if
 // that ever changes.
 using CommonFraming = RabbitMQ.Client.Framing.v0_9;

If this needs revisiting, a good place to start would be extending
[code IProtocol] to cover the variation.
