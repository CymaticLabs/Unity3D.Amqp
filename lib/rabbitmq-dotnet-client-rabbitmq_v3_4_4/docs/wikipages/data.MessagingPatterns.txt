[comment -*- outline -*-]

** Common ways of working with AMQP

When building distributed systems with AMQP, there are a number of
different messaging patterns that crop up over and over again. In this
section, we cover some of the most common coding patterns and
interaction styles:

 - Point-to-point messaging: both remote procedure call (RPC), and
   asynchronous messages directed toward a particular receiver

 - Event broadcasting: one-to-many interactions; transmission of
   messages directed implicitly to a set of interested receivers, with
   collection of zero or more possible responses

 - Responsibility transfer: choosing which piece of the network is
   responsible for any given message

 - Reliable message transfer: at-least-once, at-most-once and
   exactly-once message delivery guarantees

 - Coding with high-availability AMQP server pairs

 - Preserving atomicity and idempotence when interacting with external
   resources

Limited library support is also available for working with these
patterns, in the [code RabbitMQ.Client.MessagePatterns] namespace:

 - [code Subscription] provides a high-level interface to receiving
   messages from the server

 - [code SimpleRpcServer] builds on [code Subscription] to implement
   an RPC or one-way service

 - [code SimpleRpcClient] builds on [code Subscription] to interact
   with remote services

Future releases of the RabbitMQ .NET client library will include
improved high-level support for the most common messaging patterns and
their variations.

** Point-to-point messaging

The point-to-point messaging pattern occurs when the publisher of a
message has a particular receiving application in mind - for instance,
when a RPC-style service is made available via the AMQP server, or
when an application in a workflow chain receives a work item from its
predecessor and sends the transformed work item to its successor.

*** Synchronous, client-server remote procedure call (RPC)

In order to perform request/response RPC,

 - some means of addressing the service must be available

 - some means of receiving a reply must be available

 - some means of correlating the request message to the reply message
   must be available

**** Addressing the service

Since AMQP messages are published using a pair of an exchange name and
a routing key, this is sufficient for addressing a service. Using a
simple exchange-name/routing-key combination permits a number of
different ways to implement the service while presenting the same
interface to clients. For instance, the service could be implemented
as a single process consuming from a queue, and load-balancing
internally, or it could be multiple processes consuming from a single
queue, being handed requests round-robin style, thereby load balancing
without special coding in the service logic.

Messages can be addressed to the service request queue either

 - directly, using the AMQP default exchange (""); or

 - indirectly, by using a service-specific exchange, which leaves the
   routing-key free for such purposes as method selection or
   additional service-specific addressing information; or

 - indirectly, by using an exchange shared by multiple services, with
   the service name encoded in the routing key.

Using an exchange other than the default exchange permits other
applications to receive copies of each request message, which can be
useful for monitoring, auditing, logging and debugging.

**** Ensuring a service instance is listening

AMQP's Basic-class publish operation ([code IModel.BasicPublish])
provides two delivery flags, "mandatory" and "immediate", which can be
used to ensure various kinds of service availability at the time a
request is sent by a client.

Setting the "mandatory" flag causes a request to be returned if it
cannot be routed to a queue, and setting the "immediate" flag causes a
request to be returned if there is no service instance ready to
receive (and, implicitly, process) the message at the time of
publication. Returned messages appear as [code basic.return] AMQP
commands, which are made visible to the application via the [code
IModel.BasicReturn] event on the [code IModel] that was used to
publish the message.

Since published messages are returned to clients via AMQP's [code
basic.return] method, and [code basic.return] is an asynchronous
negative-acknowledgement event, the [i absence] of a [code
basic.return] for a particular message cannot be taken as a
confirmation of delivery: the use of delivery flags only provides a
way of raising the bar, rather than eliminating failure entirely.

When using delivery flags it is important to be aware that different
AMQP servers implement the flags in different ways. For example, the
RabbitMQ server does not support the "immediate" flag. Furthermore,
depending on the degree of internal asynchrony and distribution that
those servers exhibit. In particular, the interpretation of
"mandatory" and "immediate" in situations where [code Tx]-class
transactions are active is underspecified in both versions 0-8 and 0-9
of the AMQP specification, and different server implementations behave
in different ways.

Additionally, the fact that a message was flagged "mandatory", and
successfully enqueued on one or more queues, is no guarantee of its
eventual receipt: most trivially, the queue could be deleted before
the message is processed, but other situations, like the use of the
[code noAck] flag by a message consumer, can also make the guarantees
provided by "mandatory" and "immediate" conditional.

Alternatively, one could use Publisher Confirms.  Setting a channel
into [i confirm mode] by calling [code IModel.ConfirmSelect] causes
the broker to send a [code Basic.Ack] after each message is processed
by delivering to a ready consumer or by persisting to disk.

Once a successfully processed message has been confirmed via the [code
IModel.BasicAcks] event handler, the broker has assumed responsibility
for the message and the client may consider the message [i handled].

Note that the broker may also [i negatively acknowledge] a message by
sending back a [code Basic.Nack].  In this case, if a message is
rejected via the [code IModel.BasicNacks] event handler, the client
should assume that the message was lost or otherwise
undeliverable. Also, note that unroutable messages - mandatory or
immediate messages published to non-existing queues or queues without
consumers - are both [code Basic.Return'ed] and [code Basic.Ack'ed].

**** Receiving replies

AMQP's Basic-class content header ([code IBasicProperties]) contains a
field called [code ReplyTo], which in AMQP 0-8 and 0-9 is an
unstructured string that can be used to tell the service where to post
a reply to a received RPC request. Across current AMQP client
libraries, there are two widely-used formats for the string in the
[code ReplyTo] header:

 - a simple queue name; or

 - a URI-like string (take care - it is [i not] a URI, it merely
   shares certain superficial characteristics with URIs) of the form

   @pre
     [i exchangeType]://[i exchangeName]/[i routingKey]

   where [i [code exchangeType]] is one of [code fanout], [code
   direct] or [code topic], and both [i [code exchangeName]] and [i
   [code routingKey]] may be empty strings.

The service instance will post its reply to the named destination, and
the requesting client should arrange to receive messages so addressed,
using either [code BasicGet] or [code BasicConsume] on an
appropriately-bound queue.

**** Correlating a received reply to a transmitted request

AMQP's Basic-class content header ([code IBasicProperties]) contains a
field called [code CorrelationId], which in AMQP 0-8 and 0-9 is an
unstructured string that can be used to match a request to a reply. A
reply message should have the same [code CorrelationId] as the one
that was attached to the request message.

*** Asynchronous, one-way messaging

In some situations, a simple request-reply interaction pattern is
inappropriate for your application. In these cases, the interaction
pattern of interest can be constructed from asynchronous, one-way,
point-to-point messages.

If an application is to respond to both synchronous, RPC-style
requests, and asynchronous one-way requests, it should use the value
of [code ReplyTo] to decide which interaction style is being requested
of it: if [code ReplyTo] is present and non-empty, the request can be
assumed to be an RPC-style call; otherwise, it should be assumed to be
a one-way message.

The [code CorrelationId] field can be used to group together a number
of related messages, just as for the RPC-style case, but more
generally tying together an arbitrary number of messages.

*** Acknowledgment modes for point-to-point

AMQP can operate in one of two modes, when receiving messages from the
server: auto-acknowledgement mode (when the [code noAck] flag has been
set on [code BasicGet], [code BasicConsume], or the [code
Subscription] constructor), or manual-acknowledgement mode. Choosing
the right acknowledgement mode is important for your application:

 - auto-acknowledgement mode means that the server will internally
   mark a message as successfully delivered as it transmits it across
   the network. Messages delivered in auto-acknowledgement mode will
   not generally be redelivered to any other receiver.

 - manual-acknowledgement mode means that the server will wait for
   positive confirmation of receipt before marking a message as
   successfully delivered. Messages delivered in
   manual-acknowledgement mode may be redelivered arbitrarily
   often[footnote Within limits - please see the AMQP specification
   for precise details of when redelivery is permitted and when and
   how it is mandated.] until a receiver takes responsibility for a
   message by sending an acknowledgement for it.

In general,

 - if a service is in manual-acknowledgement mode, it should not
   acknowledge the request message until it has replied to it; see the
   section below on interaction with external resources.

 - a client may use auto-acknowledgement mode, depending on the
   consequences of a retransmission of the request message.

*** Library support for point-to-point messaging

The RabbitMQ .NET client library includes basic support for common
tasks involving point-to-point messaging.

**** SimpleRpcServer

The class [code RabbitMQ.Client.MessagePatterns.SimpleRpcServer]
implements synchronous RPC-style request handling as well as
asynchronous message handling. Users should subclass [code
SimpleRpcServer], overriding one or more of the methods with names
beginning with "[code Handle]".

[code SimpleRpcServer] instances have a request-dispatching loop,
[code MainLoop], which interprets a request as an RPC-style request
needing a reply if the [code ReplyTo] field of the request's [code
IBasicProperties] is non-null and non-empty. Requests with absent or
empty [code ReplyTo] fields are treated as one-way.

When an RPC-style request has been processed, the reply is sent to the
[code ReplyTo] address. The reply address is first matched against a
regular-expression describing the URI-like syntax given above; if it
matches, the components of the URI-like syntax are used as the reply
address, and if it does not, the whole string is used as a simple
queue name, and the reply is sent to the default exchange ("") with a
routing-key equal to the [code ReplyTo] string.

After a reply message, including possible [code IBasicProperties]
headers, is produced by the service logic, the reply's [code
CorrelationId] is set to be equal to the [code CorrelationId] of the
request, if any, before transmission.

For very basic or unusual asynchronous point-to-point messaging tasks,
a [code Subscription] may be used instead of [code SimpleRpcServer] -
please see the section below on [code Subscription]s.

The basic pattern for implementing a service using [code
SimpleRpcServer] is as follows (assuming a class [code
MySimpleRpcServerSubclass] extending [code SimpleRpcServer]):

@code java
  using (IConnection conn = new ConnectionFactory()
                                  .CreateConnection(serverAddress)) {
      using (IModel ch = conn.CreateModel()) {

          Subscription subscription =
              new Subscription(ch, /* ... */);
          // in the line above, the "..." indicates the parameters
          // used to specify the address to use to route messages
          // to the subscription. This subscription will be used
          // to read service request messages, so the "..." effectively
          // specifies the service address.

          new MySimpleRpcServerSubclass(subscription).MainLoop();
      }
  }

The service logic would be implemented in an override of one of the
[code HandleCall] or [code HandleCast] overloads on [code
MySimpleRpcServerSubclass]. For full details, please see the code
documentation for [code SimpleRpcServer].

**** SimpleRpcClient

The class [code RabbitMQ.Client.MessagePatterns.SimpleRpcClient]
implements code for interacting with [code SimpleRpcServer]s or
similar.

RPC-style interactions are performed with the [code Call] methods. A
(private) [code Subscription] is set up to receive replies from the
service, and the [code ReplyTo] field is set to point to the
subscription. The [code CorrelationId] field of the request is
initialised to a fresh GUID. Asynchronous/one-way interactions are
simply passed on to [code IModel.BasicPublish] without modification:
it is up to the caller to set [code CorrelationId] in the asynchronous
case.

The class currently has no support for setting the "mandatory" or
"immediate" flags on a published request message, nor for handling any
[code BasicReturn] events that might arise from setting either flag.

The code that retrieves replies from the internal [code Subscription]
currently cannot deal with multiple simultaneously outstanding RPC
requests, because it requires that replies arrive in the same order as
the requests were sent out. Do not attempt to pipeline requests sent
through a single instance of [code SimpleRpcClient] until this
restriction has been lifted. See also the overridable protected method
[code SimpleRpcClient.RetrieveReply].

The basic pattern for using [code SimpleRpcClient] is as follows:

@code java
  using (IConnection conn = new ConnectionFactory()
                                  .CreateConnection(args[0])) {
      using (IModel ch = conn.CreateModel()) {

          SimpleRpcClient client = new SimpleRpcClient(ch, /* ... */);
          // in the line above, the "..." indicates the parameters
          // used to specify the address to use to route messages
          // to the service.

          // The next three lines are optional:
          client.TimeoutMilliseconds = 5000; // defaults to infinity
          client.TimedOut += new EventHandler(TimedOutHandler);
          client.Disconnected += new EventHandler(DisconnectedHandler);

          byte[] replyMessageBytes = client.Call(requestMessageBytes);
          // other useful overloads of Call() and Cast() are
          // available. See the code documentation of SimpleRpcClient
          // for full details.
      }
  }

Note that a single [code SimpleRpcClient] instance can perform many
(sequential) [code Call()] and [code Cast()] requests! It is
recommended that a single [code SimpleRpcClient] be reused for
multiple service requests, so long as the requests are strictly
sequential.

** Event broadcasting

The event broadcasting pattern occurs when an application wishes to
indicate a state change or other notification to a pool of
applications without knowing precisely the addresses of each
interested party. Applications interested in a certain subset of
events use AMQP's exchanges and queue-bindings to configure which
events are routed to their own private queues.

Generally, events will be broadcast through [code topic] exchanges,
although [code direct] exchanges, while less flexible, can sometimes
perform better for applications where their limited pattern-matching
capability is sufficient.

*** Publishing events

To publish an event,

 # ensure the exchange exists

 # determine an appropriate routing key (for stocks, a key such as
   STOCK.IBM.NYSE might be appropriate; for other applications, other
   topic hierarchies will naturally arise. See the definition of the
   [code topic] and [code direct] exchange types in the AMQP
   specification)

 # publish the message

For example:

@code java
  using (IConnection conn = new ConnectionFactory()
                                  .CreateConnection(args[0])) {
      using (IModel ch = conn.CreateModel()) {

	  IBasicProperties props = ch.CreateBasicProperties();
          FillInHeaders(props); // or similar
          byte[] body = ComputeBody(props); // or similar

          ch.BasicPublish("exchangeName",
                          "chosen.routing.key",
                          props,
                          body);
      }
  }

See the documentation for the various overloads of [code BasicPublish]
on class [code RabbitMQ.Client.IModel].

*** Subscription

The class [code RabbitMQ.Client.MessagePatterns.Subscription]
implements most of the boilerplate of receiving messages (including,
in particular, broadcast events) for you, including consumer
declaration and management, but excluding queue and exchange
declaration and queue binding. For example,

@code java
  // "IModel ch" in scope.
  Subscription sub = new Subscription(ch, "STOCK.IBM.#");
  foreach (BasicDeliverEventArgs e in sub) {
    // handle the message contained in e ...
    // ... and finally acknowledge it
    sub.Ack(e);
  }

will start a consumer on the queue using [code IModel.BasicConsume].
It is assumed that the queue and any bindings have been previously
declared.

[code Subscription.Ack()] should be called for each received event,
whether or not auto-acknowledgement mode is used, because [code
Subscription] internally knows whether an actual network message for
acknowledgement is required, and will take care of it for you in an
efficient way so long as [code Ack()] is always called in your code.

For full details, please see the code documentation for the [code
Subscription] class.

*** Retrieving events - low-level approach

Usually, the high-level approach using [code Subscription] is
sufficient. Occasionally, however, there is a need to use the
low-level AMQP primitives. The low-level approach to retrieving events
is to bind a queue to the exchange concerned with an appropriate
routing-key pattern specification. For instance, assuming that our
application wanted to retrieve all prices regarding IBM on queue
"MyApplicationQueue":

@code java
  // "IModel ch" in scope.
  ch.ExchangeDeclare("prices", "topic");
  ch.QueueDeclare("MyApplicationQueue", false, true, true, null);
  ch.QueueBind("MyApplicationQueue", "prices",
               "STOCK.IBM.#", false, null);

... followed by consumption of messages from "MyApplicationQueue"
using [code BasicGet] or [code BasicConsume]. A more full example is
given in the ApiOverview chapter.

*** Acknowledgment modes for event broadcasting

The same auto-acknowledgement/manual-acknowledgement decision as for
point-to-point messaging is available for consumers of broadcast
events, but the pattern of interaction introduces different tradeoffs:

 - for high-volume messaging where it is occasionally acceptable to
   not receive one of the messages one is interested in,
   auto-acknowledgement mode makes sense

 - for scenarios where every message matching our subscription needs
   to be delivered, manual-acknowledgement is appropriate

For more information, see the section on reliable message transfer
below.

Note also that class [code Subscription] takes care of acknowledgement
and the various acknowledgement modes for you, so long as [code
Subscription.Ack()] is called for each received message.

** Responsibility transfer

In cases where either

 - a non durable exchange and/or queue is used[footnote See the AMQP
   specification for full details of the meaning of "durable" here],
   or

 - a message is published with its [code
   IBasicProperties.DeliveryMode] set to any value other than 2

the message is considered [i transient], and will not (usually) be
written to disk as part of the interaction between the AMQP server and
the various AMQP clients publishing and consuming messages.

When a message is transient, it means that the responsibility for
ultimate processing of the message resides with the endpoints - the
two AMQP clients involved: the publisher, and the consumer.

Responsibility can be partially transferred to the broker by using
durable queues, durable exchanges, persistent-mode delivered messages
(with [code DeliveryMode] set equal to 2), and Publisher Confirms:

- ensure (ahead of time) that the target queue is durable,

- select [code Confirm] mode using [code IModel.ConfirmSelect],

- publish the message with "mandatory" flag set and [code
  DeliveryMode] set equal to 2,

- listen for acknowledgements and negative acknowledgments by setting
  the [code IModel.BasicAcks] and [code BasicNacks] event handlers.

Once a broker acknowledges a message via the [code BasicAcks] handler,
it has taken responsibility for keeping the message on disk and on the
target queue until some other application retrieves and acknowledges
the message.

If a broker rejects a message via the [code BasicNacks] handler, the
publisher may assume that the message was lost or otherwise
undeliverable.

Note that for unroutable messages are not considered failures and are
both [code Basic.Return'ed] and [code Basic.Ack'ed].  So, if the
"mandatory" or "immediate" are used, the client must also listen for
returns by setting the [code IModel.BasicReturn] handler.

Responsibility can also be placed with an external database, even
further along the chain - see the section on interaction with external
resources below.

** Reliable message transfer

Messages can be transported between endpoints with different
quality-of-service (QoS) levels. In general, failure cannot be
completely ruled out, but it is important to understand the various
delivery failure modes to understand the kinds of recovery from
failure that are required, and the kinds of situation for which
recovery is possible.

To reiterate: it is not possible to completely rule out failure. The
best that can be done is to narrow the conditions in which failure can
occur, and to notify a system operator when failure is detected.

*** At-least-once delivery

This QoS level assures that a message is delivered to its ultimate
destination at least once. That is, a receiver may receive multiple
copies of the message. If it is important that a side-effect only
occur once for a given message, either at-most-once or exactly-once
QoS levels should be used instead.

To implement at-least-once delivery:

 - publish the message as usual, with some correlation identifier and
   reply-to address on it so that the receiver can acknowledge receipt
   to the sender

 - when receiving a message, send an acknowledgement message back to
   the sender. If the message is an RPC request, then the RPC reply
   message is implicitly an acknowledgement of receipt of the request.

To reduce the need for resends of a message when publishing using an
at-least-once QoS level, it can sometimes be appropriate to use [code
Confirm]-class, as described above in the section on responsibility
transfer. Of course, if a confirmation from the broker is lost, then a
resend will have to be done, since the sending client doesn't know
whether the server actually saw the message or not unless the
[code Basic.Nack] arrives.

Alternatively, rather than implement the round-trip logic manually, a
client may use Publisher Confirms.  By enabling Confirm mode on a
channel, a client is requesting that the broker acknowledge or
negatively acknowledge all messages sent on the channel from that
point on.  See the instructions from Responsibility Transfer on how to
use confirms.

Deciding on a message-resend policy can be difficult. Some simple
resend strategies are:

 - resend if your connection is lost or some other crash occurs before
   you receive confirmation of receipt

 - timeout and resend if you do not receive a confirmation within a
   few seconds. Make sure to double the timeout for each resend, to
   help avoid retry-related denial-of-service and network congestion.

*** At-most-once delivery

For at-most-once delivery, simply

 - publish the message, once, as usual. No correlation identifier is
   required.

 - receive the message in the consuming application, paying attention
   to the [code Redelivered] flag on the delivery. The [code
   Redelivered] flag will only be clear when the server believes that
   it is offering a message for consumption for the very first
   time. If any attempt at delivery has been made before, the [code
   Redelivered] flag will be set.

The [code Redelivered] flag is a very limited piece of information,
giving only at-most-once QoS. In particular, it cannot be used for
exactly-once QoS.

*** Exactly-once delivery

Exactly-once QoS is an extension of at-least-once QoS, with the
addition of a barrier on the receiving side to ensure that a given
message is never processed more than once, even if it is received more
than once:

 - publish the message as usual, with some correlation identifier and
   reply-to address on it so that the receiver can acknowledge receipt
   to the sender

 - when receiving a message, keep a record of the messages that have
   been processed, and only process a received message if it has not
   been seen before.

 - always send an acknowledgement message back to the sender, even if
   the message has been seen before.

 - if the message is an RPC request, then the RPC reply message is
   implicitly an acknowledgement of receipt of the request. The RPC
   reply message [i must] not change, even if it is sent a second
   time: it is important that even if one or more copies of the
   request or the reply message is lost or duplicated that the
   original requestor receives consistent information back from the
   requestee.

An interesting challenge in implementing the record of processed
messages is deciding when it is acceptable to remove entries from the
table (equivalent to being confident that no duplicates of those
messages will appear in future). One option is to use the message
expiry header in the [code IBasicProperties] structure, but be warned:
versions of AMQP up to and including 0-9 do not specify the syntax or
semantics of this field! Another option is to have a three-way
exchange between the sender and recipient in which the sender promises
not to send any further duplicates on the third leg of the
interaction.

Still another option (perhaps the most elegant and space-efficient) is
to use message identifiers that are strictly increasing as time goes
by, so that a single "high water mark" can serve as a record of not
only that message, but of all other messages preceding it, without
taking up any additional space. Care must be taken when using this
last option to account for request messages that arrive out-of-order
or that go missing.

** Coding with high-availability AMQP server pairs

In situations where continuous AMQP service is desired, the
possibility of a server failure can be hedged against with some
careful programming and the availability of a warm-standby AMQP server
for failover.

The current version of the RabbitMQ .NET client library does not
include any special support for failing over to a standby
broker[footnote Submissions welcome!].

The main concerns when failing over are

 - atomicity of published/acknowledged work units, and

 - availability of configured resources on the backup server

Message producers should take care to use transactions in order to
receive positive confirmation of receipt of a group of messages from a
server, and should keep a record of the exchanges, queues and bindings
they need to have available in order to perform their work, so that on
failover, the appropriate resources can be declared before replaying
the most recent transactions to recover.

Message consumers should be aware of the possibility of missing or
duplicate messages when failing over: a publisher may decide to resend
a transaction whose outcome is in doubt, or a transaction the
publisher considered complete could disappear entirely due to failure
of the primary AMQP server.

** Interacting with external resources

A common pattern for an AMQP-connected service is to

 # receive a service request via an AMQP queue

 # update some external resource, such as a file or database

 # reply via AMQP, or at a minimum, acknowledge to the AMQP server
   that the message triggering the action has been completed

Often elements of the at-least-once or exactly-once patterns appear in
conjunction with the external-resource pattern - specifically, the
side-effects discussed in the section on reliable message transfer
above are often effects on an external resource.

In cases where the exactly-once pattern appears in conjunction with an
external resource, it's important to write code that is able at each
step to determine whether the step has already been taken in some
previous attempt at completing the whole transaction, and if it has,
to be able to omit it in this attempt and proceed to the next
step. For example:

 - If a work-triggering request went missing, another copy will
   (eventually) arrive from the ultimate requestor.

 - If the work was already performed, for instance a database table
   was updated, in a previous receipt of the work item in question,
   the service needs to keep a record of completion of the external
   work that is atomic with respect to the atomic work itself: for
   instance, within the same database transaction, some log of
   honoured requests could be updated, or the row being modified could
   be updated to include the ID of the request that caused the
   modification, as well as previous request-IDs that modified the row
   in question.

   This makes it important to be able to compress request IDs so that
   they do not take unbounded space in the log of performed work, and
   so that we do not need to introduce a full distributed
   garbage-collection protocol with the ultimate requestor. One way of
   doing this is to choose to use request IDs that are strictly
   increasing, so that a "high water mark" can be used; see also the
   section on exactly-once delivery above.

 - Once the work is known to have been performed, and a reply has been
   produced (if there is one), the reply can be sent back to the
   requestor as many times as necessary. The requestor knows which
   replies it is expecting, and can discard unwanted duplicates. So
   long as duplicates of the same request always receive identical
   reply messages, the replier need not be careful about sending too
   many copies of the reply.

 - Once the reply has been sent to the AMQP server, the request
   message can be acknowledged as received and processed with the AMQP
   server. In cases where there is no reply to a request, the
   acknowledgement is still useful to ensure that requests are not
   lost.
