This section gives an overview of the RabbitMQ .NET client API.

Only the basics of using the library are covered: for full detail,
please see the javadoc-like API documentation generated from the
source code.

** Major namespaces, interfaces and classes

The API is closely modelled on the AMQP 0-9-1 protocol specification, with
little additional abstraction.

The core API interfaces and classes are defined in the [code
RabbitMQ.Client] namespace:

@code java
 using RabbitMQ.Client;

The core API interfaces and classes are

 - [code IModel]: represents an AMQP data channel, and provides most
   of the AMQP operations

 - [code IConnection]: represents an AMQP connection

 - [code ConnectionFactory]: constructs [code IConnection] instances

Other useful interfaces and classes include:

 - [code QueueingBasicConsumer]: receives messages delivered from the server
 - [code Protocols]: support class for choosing an AMQP protocol variant

Public namespaces other than [code RabbitMQ.Client] include:

 - [code RabbitMQ.Client.Content]: construction and analysis of
   messages that are binary-compatible with messages produced and
   consumed by QPid's JMS compatibility layer.

 - [code RabbitMQ.Client.Events]: various events and event handlers
   that are part of the AMQP client library.

 - [code RabbitMQ.Client.Exceptions]: exceptions visible to the user
   of the AMQP client library.

All other namespaces are reserved for private implementation detail of
the library, although members of private namespaces are usually made
available to applications using the library in order to permit
developers to implement workarounds for faults or design mistakes they
discover in the library implementation. Applications cannot rely on
any classes, interfaces, member variables etc. that appear within
private namespaces remaining stable across releases of the library.

** Connecting to a broker

The following two code snippets connect to an AMQP broker:

@code java
 ConnectionFactory factory = new ConnectionFactory();
 factory.UserName = user;
 factory.Password = pass;
 factory.VirtualHost = vhost;
 factory.Protocol = Protocols.FromEnvironment();
 factory.HostName = hostName;
 factory.Port = AmqpTcpEndpoint.UseDefaultPort;
 IConnection conn = factory.CreateConnection();

@code java
 ConnectionFactory factory = new ConnectionFactory();
 factory.Uri = "amqp://user:pass@hostName:port/vhost";
 IConnection conn = factory.CreateConnection();

Since the .NET client uses a stricter interpretation of the AMQP URI
spec than the other clients, care must be taken when using URIs.  In
particular, the host part must not be omitted and virtual hosts with
empty names are not addressable.

All factory properties have default values. The default value for a property will be used if the property remains unassigned prior to creating a connection:
 - username: [code "guest"]
 - password: [code "guest"]
 - virtual-host: [code "/"]
 - protocol: [code AMQP 0-9-1]
 - hostname: [code localhost]
 - port: [code 5672]

The IConnection interface can then be used to open a channel:

@code java
 IModel channel = conn.CreateModel();

The channel can now be used to send and receive messages,
as described in subsequent sections.

** Disconnecting from a broker

To disconnect, simply close the channel and the connection:

@code java
 channel.Close(200, "Goodbye");
 conn.Close();

Note that closing the channel is considered good practice, but isn't
strictly necessary - it will be done automatically anyway when the
underlying connection is closed.

In some situations, you may want the connection to close automatically
once the last open channel on the connection closes. To achieve this,
set the [code IConnection.AutoClose] property to true, but only [b
after] creating the first channel:

@code java
 IConnection conn = factory.CreateConnection(...);
 IModel channel = conn.CreateModel();
 conn.AutoClose = true;

When [code AutoClose] is true, the last channel to close will also
cause the connection to close[footnote See [code
RabbitMQ.Client.Impl.SessionManager.CheckAutoClose()] for the
implementation of this feature.]. If it is set to true before any
channel is created, the connection will close then and there.

** Using exchanges and queues

Client applications work with exchanges and queues, the high-level
building blocks of AMQP. These must be "declared" before they can be
used. Declaring either type of object simply ensures that one of that
name exists, creating it if necessary.

Continuing the previous example, the following code declares an
exchange and a queue, then binds them together.

@code java
 channel.ExchangeDeclare(exchangeName, ExchangeType.Direct);
 channel.QueueDeclare(queueName, false, false, false, null);
 channel.QueueBind(queueName, exchangeName, routingKey, null);

This will actively declare the following objects:

 # a non-durable, non-autodelete exchange of "direct" type
 # a non-durable, non-exclusive, non-autodelete queue

The exchange can be customised by using additional parameters.
The above code then binds the queue to the exchange with the given
routing key.

Note that many Channel API methods are overloaded. The convenient
short form of ExchangeDeclare uses sensible defaults. There are
also longer forms with more parameters, to let you override these
defaults as necessary, giving full control where needed.

This "short version, long version" pattern is used throughout the API.

** Publishing messages

To publish a message to an exchange, use [code IModel.BasicPublish] as
follows:

@code java
 byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");
 channel.BasicPublish(exchangeName, routingKey, null, messageBodyBytes);

For fine control, you can use overloaded variants to specify the
mandatory flag, or send messages with basic-class header properties:

@code java
 byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");
 IBasicProperties props = channel.CreateBasicProperties();
 props.ContentType = "text/plain";
 props.DeliveryMode = 2;
 channel.BasicPublish(exchangeName,
                      routingKey, props,
                      messageBodyBytes);

This sends a message with delivery mode 2 (persistent) and
content-type "text/plain". See the definition of the [code
IBasicProperties] interface for more information about the available
header properties.

** Retrieving individual messages

To retrieve individual messages, use [code IModel.BasicGet]. The
returned value is an instance of BasicGetResult, from which the header
information (properties) and message body can be extracted:

@code java
 bool noAck = false;
 BasicGetResult result = channel.BasicGet(queueName, noAck);
 if (result == null) {
     // No message available at this time.
 } else {
     IBasicProperties props = result.BasicProperties;
     byte[] body = result.Body;
     ...

Since [code noAck = false] above, you must also call [code
IModel.BasicAck] to acknowledge that you have successfully received
and processed the message:

@code java
     ...
     // acknowledge receipt of the message
     channel.BasicAck(result.DeliveryTag, false);
 }

** Retrieving messages by subscription

Another way to receive messages is to set up a subscription using the
[code IBasicConsumer] interface. The messages will then be delivered
automatically as they arrive, rather than having to be requested
proactively.

The easiest and safest way to implement a consumer is to use the
convenience class [code QueueingBasicConsumer], and retrieve
deliveries from the [code SharedQueue] instance contained therein:

@code java
 QueueingBasicConsumer consumer = new QueueingBasicConsumer(channel);
 String consumerTag = channel.BasicConsume(queueName, false, consumer);
 while (true) {
     try {
         RabbitMQ.Client.Events.BasicDeliverEventArgs e =
           (RabbitMQ.Client.Events.BasicDeliverEventArgs)
           consumer.Queue.Dequeue();
         IBasicProperties props = e.BasicProperties;
         byte[] body = e.Body;
         // ... process the message
         channel.BasicAck(e.DeliveryTag, false);
     } catch (OperationInterruptedException ex) {
         // The consumer was removed, either through
         // channel or connection closure, or through the
         // action of IModel.BasicCancel().
         break;
     }
 }

Another alternative is to subclass [code DefaultBasicConsumer],
overriding methods as necessary, or implement [code IBasicConsumer]
directly. You will generally want to implement the core method [code
HandleBasicDeliver].

More sophisticated consumers will need to implement further
methods. In particular, [code HandleModelShutdown] traps
channel/connection closure. Consumers can also implement [code
HandleBasicCancelOk] to be notified of cancellations.

The [code ConsumerTag] property of [code DefaultBasicConsumer] can be
used to retrieve the server-generated consumer tag, in cases where
none was supplied to the original [code IModel.BasicConsume] call.

You can cancel an active consumer with [code IModel.BasicCancel]:

@code java
 channel.BasicCancel(consumerTag);

When calling the API methods, you always refer to consumers by their
consumer tags, which can be either client- or server-generated as
explained in the AMQP specification document.

** Threading, deadlocks, and associated restrictions on consumers

Each [code IConnection] instance is, in the current implementation,
backed by a single background thread that reads from the socket and
dispatches the resulting events to the application.
Additionally there are two threads responsible for [code Heartbeat] support,
if connection negotiation turned it on.

Usually, therefore, there will be four threads active in an application
using this library:

 - the application thread: contains the application logic, and makes
   calls on [code IModel] methods to perform AMQP operations.

 - the connection thread: hidden away and completely managed by the
   [code IConnection] instance.
   
 - the heartbeat read thread: continuously checking if [code IConnection]
   instance has not missed too many [code Heartbeat] frames from the broker
 
 - the heartbeat write thread: continuosuly checking if [code IConnection]
   instance should send [code Heartbeat] frame to the broker

The one place where the nature of the threading model is visible to
the application is in any callback the application registers with the
library. Such callbacks include:

 - any [code IBasicConsumer] method

 - the [code BasicReturn] event on [code IModel]

 - any of the various shutdown events on [code IConnection], [code
   IModel] etc.

Application callback handlers [b must not] invoke blocking AMQP
operations (such as [code IModel.QueueDeclare], [code
IModel.BasicCancel] or [code IModel.BasicPublish]). If they do, the
channel will deadlock[footnote The underlying implementation reason
is that the [code IBasicConsumer] callbacks are invoked in the connection's
thread rather than in the application's thread.].

Only asynchronous AMQP operations without content are safe for use
within callbacks, such as [code IModel.BasicAck]. It is not safe to
use [code IModel.BasicPublish] in callbacks, because channel flow
could block publication.

For this reason, [code QueueingBasicConsumer] is the safest way of
subscribing to a queue, because its implementation uses [code
RabbitMQ.Util.SharedQueue] to pass deliveries over to the application
thread, where all processing of received deliveries is done, and where
any AMQP [code IModel] operation is safe.

** IModel should not be shared between threads

In general, [code IModel] instances should not be used by more than
one thread simultaneously: application code should maintain a clear
notion of thread ownership for [code IModel] instances.

If more than one thread needs to access a particular [code IModel]
instances, the application should enforce mutual exclusion itself. One
way of achieving this is for all users of an [code IModel] to [code
lock] the instance itself:

@code java
  IModel ch = RetrieveSomeSharedIModelInstance();
  lock (ch) {
    ch.BasicPublish(...);
  }

Symptoms of incorrect serialisation of [code IModel] operations
include, but are not limited to,

 - invalid frame sequences being sent on the wire (which occurs, for
   example, if more than one [code BasicPublish] operation is run
   simultaneously), and/or

 - [code NotSupportedException]s being thrown from a method in class
   [code RpcContinuationQueue] complaining about [code "Pipelining of
   requests forbidden"] (which occurs in situations where more than
   one AMQP RPC, such as [code ExchangeDeclare], is run
   simultaneously).

** Handling unroutable messages

If a message is published with the "mandatory" flag
set, but cannot be routed, the broker will return it to the sending
client (via a [code basic.return] AMQP command).

To be notified of such returns, clients can subscribe to the [code
IModel.BasicReturn] event.  If there are no listeners attached to the
event, then returned messages will be silently dropped.

@code java
 channel.BasicReturn +=
   new RabbitMQ.Client.Events.BasicReturnEventHandler(...);

The [code BasicReturn] event will fire, for example, if the client
publishes a message with the "mandatory" flag set to an exchange of
"direct" type which is not bound to a queue.

** Automatic Recovery From Network Failures

*** ConnectionRecovery

Network connection between clients and RabbitMQ nodes can fail.
RabbitMQ .NET client supports automatic recovery of connections
and topology (queues, exchanges, bindings, and consumers).

The automatic recovery process for many applications follows the following steps:

  - Reconnect
  - Restore connection listeners
  - Re-open channels
  - Restore channel listeners
  - Restore channel [code basic.qos] setting, publisher confirms and transaction settings

Topology recovery includes the following actions, performed for every channel

  - Re-declare exchanges (except for predefined ones)
  - Re-declare queues
  - Recover all bindings
  - Recover all consumers

To enable automatic connection recovery, set
[code ConnectionFactory.AutomaticRecoveryEnabled] to true:

@code java
 ConnectionFactory factory = new ConnectionFactory();
 factory.AutomaticRecoveryEnabled = true;
 // connection that will recover automatically
 IConnection conn = factory.CreateConnection();

If recovery fails due to an exception (e.g. RabbitMQ node is
still not reachable), it will be retried after a fixed time interval (default
is 5 seconds). The interval can be configured:

@code java
 ConnectionFactory factory = new ConnectionFactory();
 // attempt recovery every 10 seconds
 factory.NetworkRecoveryInterval = TimeSpan.FromSeconds(10);


*** Topology Recovery

Topology recovery involves recovery of exchanges, queues, bindings
and consumers. It is enabled by default but can be disabled:

@code java
 ConnectionFactory factory = new ConnectionFactory();

 Connection conn = factory.CreateConnection();
 factory.AutomaticRecoveryEnabled = true;
 factory.TopologyRecoveryEnabled  = false;


*** Manual Acknowledgements and Automatic Recovery

When manual acknowledgements are used, it is possible that
network connection to RabbitMQ node fails between message
delivery and acknowledgement. After connection recovery,
RabbitMQ will reset delivery tags on all channels.

This means that [code basic.ack], [code basic.nack], and [code basic.reject]
with old delivery tags will cause a channel exception. To avoid this,
RabbitMQ .NET client keeps track of and updates delivery tags to make them monotonically
growing between recoveries.

[code IModel.BasicAck],
[code IModel.BasicNack], and
[code IModel.BasicReject] then translate adjusted
delivery tags into those used by RabbitMQ.

Acknowledgements with stale delivery tags will not be
sent. Applications that use manual acknowledgements and automatic
recovery must be capable of handling redeliveries.
